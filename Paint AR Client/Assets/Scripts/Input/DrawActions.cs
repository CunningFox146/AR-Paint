//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/DrawActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ArPaint.Input
{
    public partial class @DrawActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DrawActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DrawActions"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""8cf2aa07-123e-4be0-af35-43f7c8f99993"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""c82afefe-0221-4066-a6f1-15ce6ecbb69a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AllTouches"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3be65ee0-6ba0-4973-adca-7e9c880f9846"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f00deab0-4c64-4358-a717-8a4c55f6fa38"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99b046b3-5e39-40f9-bddb-45de902eda7d"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f9af046-2ca7-49e4-922b-ba35847b12cb"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AllTouches"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_Click = m_Touch.FindAction("Click", throwIfNotFound: true);
            m_Touch_AllTouches = m_Touch.FindAction("AllTouches", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_Click;
        private readonly InputAction m_Touch_AllTouches;
        public struct TouchActions
        {
            private @DrawActions m_Wrapper;
            public TouchActions(@DrawActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_Touch_Click;
            public InputAction @AllTouches => m_Wrapper.m_Touch_AllTouches;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @Click.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnClick;
                    @AllTouches.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnAllTouches;
                    @AllTouches.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnAllTouches;
                    @AllTouches.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnAllTouches;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                    @AllTouches.started += instance.OnAllTouches;
                    @AllTouches.performed += instance.OnAllTouches;
                    @AllTouches.canceled += instance.OnAllTouches;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        public interface ITouchActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnAllTouches(InputAction.CallbackContext context);
        }
    }
}
